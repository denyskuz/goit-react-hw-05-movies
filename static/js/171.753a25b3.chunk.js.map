{"version":3,"file":"static/js/171.753a25b3.chunk.js","mappings":"4LACA,GAAgB,KAAO,mBAAmB,KAAO,oB,SCkCjD,EA/Bc,SAAC,GAAe,IAAbA,EAAY,EAAZA,MACTC,GAAWC,EAAAA,EAAAA,MACf,OACE,eAAIC,UAAWC,EAAAA,KAAf,SACGJ,EAAMK,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,MAAOC,EAAb,EAAaA,YAAaC,EAA1B,EAA0BA,KAA1B,OACT,eAAaN,UAAWC,EAAAA,KAAxB,UACE,UAAC,KAAD,CACEM,GAAE,kBAAcJ,GAChBK,MAAO,CAAEC,KAAMX,GAFjB,WAIE,gBACEE,UAAWC,EAAAA,MACXS,IAAKL,EAAW,yCAAqCA,GAAe,kCACpEM,IAAKP,GAASE,EACdM,MAAM,SAER,4BAASR,GAASE,QAXbH,EADA,KAkBlB,C,2GCzBD,GAAiB,E,SCiBjB,EAba,WACX,OAA0BU,EAAAA,EAAAA,UAAS,IAAnC,eAAOhB,EAAP,KAAciB,EAAd,KAKA,OAHAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,MAAsBC,MAAK,SAACC,GAAD,OAAUJ,EAASI,EAAKC,QAAxB,GAC5B,GAAE,KAEA,6BACG,eAAInB,UAAWC,EAAAA,MAAf,6BACA,SAACmB,EAAA,EAAD,CAAOvB,MAAOA,MAGrB,C,sBCjBD,SAASwB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOb,KAAKQ,EAAOC,EAEvC,CAEe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GAEzB,SAASb,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,EACnE,CAEAhB,OAAMiB,EACR,GACF,CACF,C,uJClCMC,EAAW,+BACXC,EAAU,mCAAhB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,EAAAA,EAAAA,IAAAA,MAAf,2GAA2BC,EAA3B,+BAAiC,GAAIC,EAArC,+BAA8C,CAAC,EAA/C,SACyBC,MAAMF,EAAKC,GADpC,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMlB,QAAQT,OAAO,IAAI4B,MAAM,cAJ/B,2GAOO,SAASpC,IACd,OAAO6B,EAAY,GAAD,OACbF,EADa,qCACwBC,GAE3C,CAEM,SAASS,EAAiBC,GAC/B,OAAOT,EAAY,GAAD,OACbF,EADa,iCACoBC,EADpB,kBACqCU,EADrC,8CAGnB,CAEM,SAASC,EAAepD,GAC7B,OAAO0C,EAAY,GAAD,OACbF,EADa,kBACKxC,EADL,oBACmByC,EADnB,mBAGnB,CAEM,SAASY,EAAerD,GAC7B,OAAO0C,EAAY,GAAD,OACbF,EADa,kBACKxC,EADL,4BAC2ByC,EAD3B,mBAGnB,CAEM,SAASa,EAAkBtD,GAChC,OAAO0C,EAAY,GAAD,OACbF,EADa,kBACKxC,EADL,4BAC2ByC,EAD3B,mBAGnB,C","sources":["webpack://react-homework-template/./src/components/Items/Item.module.css?ce58","components/Items/Items.jsx","pages/Home/Home.module.css","pages/Home/Home.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Item_list__G04wX\",\"item\":\"Item_item__vicSQ\"};","import { Link, useLocation } from \"react-router-dom\";\nimport { arrayOf, shape, string, number  } from 'prop-types';\nimport classes from \"./Item.module.css\";\n\nconst Items = ({ items }) => {\n  const location = useLocation();\n    return (\n      <ul className={classes.list}>\n        {items.map(({id, title, poster_path, name }) => (\n          <li key={id} className={classes.item}>\n            <Link\n              to={ `/movies/${id}`}\n              state={{ from: location }}\n            >\n              <img\n                className={classes.image}\n                src={poster_path ? `https://image.tmdb.org/t/p/w500${poster_path}`: 'https://via.placeholder.com/500'}\n                alt={title || name}\n                width=\"320\"\n              />\n              <strong>{title || name}</strong>\n            </Link>\n          </li>\n        ))}\n        </ul>\n    );\n};\nItems.propTypes = {\n  items: arrayOf(shape({\n    id: number.isRequired,\n    title: string,\n    poster_path: string.isRequired,\n    name: string\n  })).isRequired\n};\nexport default Items;","// extracted by mini-css-extract-plugin\nexport default {};","import { useState, useEffect } from 'react';\nimport { fetchTrendingMovies } from '../../services/api'\nimport Items  from 'components/Items';\nimport classes from './Home.module.css'\n\nconst Home = () => {\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    fetchTrendingMovies().then((data) => setItems(data.results));\n  }, []);\n  return (\n     <main>\n        <h1 className={classes.title}>Trending today</h1>\n        <Items items={items} />\n      </main>\n  );\n}\nexport default Home;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","const BASE_URL = \"https://api.themoviedb.org/3\";\nconst API_KEY = \"e704dedb4527dcb2d58f4f28374639e6\";\n\nasync function errorHandle(url = \"\", config = {}) {\n  const response = await fetch(url, config);\n  return response.ok  \n    ? await response.json()\n    : Promise.reject(new Error(\"Not found\"));\n}\n\nexport function fetchTrendingMovies() {\n  return errorHandle(\n    `${BASE_URL}/trending/all/day?api_key=${API_KEY}`\n  );\n}\n\nexport function fetchSearchQuery(searchQuery) {\n  return errorHandle(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${searchQuery}&language=en-US&page=1&include_adult=false`\n  );\n}\n\nexport function fetchMovieById(id) {\n  return errorHandle(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieCast(id) {\n  return errorHandle(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport function fetchMovieReviews(id) {\n  return errorHandle(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n}"],"names":["items","location","useLocation","className","classes","map","id","title","poster_path","name","to","state","from","src","alt","width","useState","setItems","useEffect","fetchTrendingMovies","then","data","results","Items","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","BASE_URL","API_KEY","errorHandle","url","config","fetch","response","ok","json","Error","fetchSearchQuery","searchQuery","fetchMovieById","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}